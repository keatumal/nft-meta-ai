#+title: Получение метаданных и описание изображения через ИИ для NFT стандарта ZORA-1155
#+author: anakvad.base.eth
#+date: 2025-01-30

* Описание проекта

Этот проект создан в рамках [[https://www.bountycaster.xyz/bounty/0x2ce371c71f9f33796b33034212aea5df9ca05da4][этого баунти]]. Поэтому в целом это ad-hoc решение, но будет работать для любого контракта на сетях Ethereum и Zora с ограничениями, обговорёнными ниже.

Суть в том, что необходимо получить следующую информацию об NFT: имя коллекции, ID токена, имя токена, описание токена, URL изображения и дату минта. Затем, используя GPT получить текст из картинки, и занести всю эту информацию в БД.

Этот софт использует RPC ноды для получения информации о токене. Вначале я пробовал использовать API Moralis, но получил неполные данные. Поэтому, для большей надёжности и независимости от поставщиков услуг, решил опрашивать блокчейн напрямую.

Мой подход довольно узок и специфичен, вот почему:

- У контракта должны быть функции =name=, =uri= и =nextTokenId=
- Для получения ID токена я начинаю с фиксированного числа (по-умолчанию 1), а каждый следующий ID получается прибавлением единицы, пока не достигнет числа, возвращенного функцией =nextTokenId= минус единица.

Для работы с БД используется [[https://www.sqlalchemy.org/][SQLAlchemy]], а значит поддерживаются различные БД, которые можно сменить одной строкой в файле ~.env~.

Поддерживается скачивание изображений с IPFS. Перед отправкой в GPT изображения сжимаются до размера 512x512 (настраивается). Такое разрешение было выбрано как компромисс между качеством и стоимостью API.

В качестве нод используются Infura и dRPC. Логи событий кешируются и загружаются при необходимости.

В связи с особенность работы контрактов, минт NFT под одним и тем же ID может быть несколько раз. Поэтому в БД записывается дата и время самого первого минта.

* Пример работы программы

#+caption: [[file:images/work-example-1.png][Пример работы программы]]
#+name: fig:work-example-1
[[file:images/work-example-1.png]]

* Установка

1. Клонируйте репозиторий:

   #+begin_src bash
     git clone 
     cd nft-meta-ai
   #+end_src

2. Установите зависимости с помощью Pipenv:
   #+begin_src
     pipenv install
   #+end_src

3. (Опционально) Если вы хотите использовать ~requirements.txt~, выполните:
#+begin_src
  pip install -r requirements.txt
#+end_src

*  Использование

1. Отредактируйте ~config.yaml~ (описание ниже)
2. Создайте ~.env~ (описание ниже, пример в ~.env.example~)
3. Запустите скрипт ~main.py~
   1. Через Pipenv
      #+begin_src
        pipenv shell
        python main.py
      #+end_src

      Или

      #+begin_src
        pipenv run python main.py
      #+end_src

   2. Если устанавливали через ~requirements.txt~:
      #+begin_src
        python3 main.py
      #+end_src

* Конфигурация

** =config.yaml=

*** =general=

Общие настройки.

**** =use_proxy= (optional, default: =yes=)

Использовать ли SOCKS прокси для всех подключений.

**** =download_image_timeout= (optional, default: =5=)

Если не получается загрузить изображение, то попробовать снова через это количество секунд. Попытки бесконечны.

**** =fetch_metadata_timeout= (optional, default: =60=)

Если не получилось получить данные токена с ноды, то попробовать снова через это количество секунд. Попытки бесконечны.

*** =blockchains=

Словарь с настройками блокчейнов, ключами являются их названия. Поддерживаются только два: =ethereum= и =zora=.

**** =<blockchain-name>=

***** =contracts=

Список контрактов в виде словарей с настройками.

****** =address=

Адрес *с контрольной суммой* контракта.

****** =from_block= (optional)

Начиная с какого блока искать события минта. Рекомендуется указывать для экономии вычислительных ресурсов ноды. По-умолчанию равен нулю.

****** =first_id= (optional)

Какой ID токена считать первым. По-умолчанию равен единице.

*** =openai=

Настройки генерации текста из изображения.

**** =model=

Имя модели. Текущий список здесь: https://platform.openai.com/docs/models

**** =error_timeout= (optional, default: 10)

При получении ошибки от API OpenAI ждать столько секунд перед новой попыток. Попытки бесконечны.

**** =description_min_len= (optional, default: =100=)

Минимально допустимая длина ответа модели.

**** =max_attempts= (optional, default: =5=)

Если получен текст меньше допустимой длины, то пытаться сгенерировать снова это количество раз.

**** =image_resolution= (optional, default: =[512, 512]=)

Максимально допустимые размеры изображения: [width, height]. Размер каждого полученного изображения изменяется до этих размеров.

**** =prompt=

Промпт для получения ответа по изображению.

*** =paths=

Настройки различных файловых путей.

**** =cache=

***** =event_logs=

Путь до директории, куда сохранять кэш логов блокчейна.

**** =nft_images_dir=

Путь до директории для сохранения изображений NFT.

** =.env=

*** =INFURA_API_KEY=

API-ключ для Infura. Можно получить здесь: https://developer.metamask.io/

*** =DRPC_API_KEY=

API-ключ для dRPC. Можно получить здесь: https://drpc.org

*** =OPENAI_API_KEY=

API-ключ для OpenAI. Можно получить здесь: https://platform.openai.com/api-keys

*** =DB_URI=

URI базы данных для SQLAlchemy. Документация: https://docs.sqlalchemy.org/en/20/core/engines.html#database-urls

*** =PROXY_HOST=, =PROXY_PORT=, =PROXY_USER=, =PROXY_PASSWORD= (optional)

IP или домен, порт, имя пользователя и пароль для SOCKS прокси. Имя пользователя и пароль могут отсутствовать.

* Модель БД

- =network_name= (string): название блокчейна
- =contract_address= (string): адрес контракта
- =collection_name= (string): название коллекции
- =token_id= (integer): ID токена NFT
- =token_name= (string): название NFT
- =description= (text): описание NFT
- =image_url= (string): URL картинки NFT
- =mint_date= (datetime): дата и время минта в часовом поясе UTC.
- =ai_image_description= (text): описание изображения от GPT

* Лицензия

Этот проект распространяется под лицензией MIT. Подробности см. в файле LICENSE.

* Контакты

Если у вас есть вопросы или предложения, свяжитесь со мной через Telegram: https://t.me/anakvad
